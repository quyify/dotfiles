#!/bin/bash

## You'll need to have the following installed to run this script:
# - fzf: Install with `brew install fzf`

# Function to prompt user with fzf
prompt_fzf() {
  local prompt_message=$1
  local options=$2
  echo "$options" | fzf --prompt="$prompt_message: " --reverse
}

# Function to prompt user with fzf for multi-selection
prompt_fzf_multi() {
  local prompt_message=$1
  local options=$2
  echo "$options" | fzf --prompt="$prompt_message: " --multi --reverse
}

# Function to prompt user with readline, with a default value
prompt_readline() {
  local prompt_message=$1
  local default_value=$2
  read -p "$prompt_message [$default_value]: " input
  echo "${input:-$default_value}"
}

# Get the list of directories in ~/src/github.com/Shopify ordered by recency
get_recent_directories() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    find ~/src/github.com/Shopify -maxdepth 1 -type d -exec stat -f '%m %N' {} + | sort -nr | cut -d' ' -f2- | xargs -I{} basename {}
  else
    # Linux
    find ~/src/github.com/Shopify -maxdepth 1 -type d -exec stat --format '%Y %n' {} + | sort -nr | cut -d' ' -f2- | xargs -I{} basename {}
  fi
}

# Get the list of constellation files in the specified project directory
get_constellations() {
  local project=$1
  find ~/src/github.com/Shopify/$project/.spin/constellations -type f -name '*.yml' -exec basename {} .yml \; | sort
}

# Get the list of recently accessed branches for the specified project
get_recent_branches() {
  local project=$1
  git -C ~/src/github.com/Shopify/$project for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/
}

# Get the list of repos from the constellation yml files
get_repos_from_constellation() {
  local project=$1
  local constellation=$2
  local repos=()

  # Function to parse repos from a given file
  parse_repos() {
    local file=$1
    awk -v project="$project" '
      /repos:/,0 {
        if ($1 == "-") {
          gsub(":", "", $2)
          if ($2 != project) {
            print $2
          }
        }
      }
    ' "$file"
  }

  # Check for the specific constellation file
  if [[ -f ~/src/github.com/Shopify/$project/.spin/constellations/$constellation.yml ]]; then
    repos+=($(parse_repos ~/src/github.com/Shopify/$project/.spin/constellations/$constellation.yml))
  fi

  # Check for the general constellation file
  if [[ -f ~/src/github.com/Shopify/$project/.spin/constellation.yml ]]; then
    repos+=($(parse_repos ~/src/github.com/Shopify/$project/.spin/constellation.yml))
  fi

  # Remove duplicates, sort alphabetically, and trim prefixes
  echo "${repos[@]}" | tr ' ' '\n' | sort -u | sed 's|.*/||'
}

# Parse command-line arguments
project=""
constellation=""
project_branch=""

if [[ $1 =~ ^([^:]+)(:([^@]+))?(@(.+))?$ ]]; then
  project="${BASH_REMATCH[1]}"
  constellation="${BASH_REMATCH[3]}"
  project_branch="${BASH_REMATCH[5]}"
fi

# Prompt for the project parameter if not specified
if [[ -z $project ]]; then
  recent_directories=$(get_recent_directories)
  project=$(prompt_fzf "Which project?" "$recent_directories")
fi

# Prompt for the constellation parameter if not specified
if [[ -z $constellation ]]; then
  constellations=$(get_constellations "$project")
  constellations_with_default=$(echo -e "none\ndefault\n$constellations")
  constellation=$(prompt_fzf "Select the constellation" "$constellations_with_default")
fi

# Handle the case where the constellation is 'default'
if [[ "$constellation" == "default" ]]; then
  default_symlink=~/.spin/$project/default
  if [[ -L "$default_symlink" ]]; then
    constellation=$(basename "$(readlink "$default_symlink")" .yml)
  else
    echo "Error: The symlink ~/.spin/$project/default does not exist or is not a valid symlink."
    exit 1
  fi
fi

# Prompt for the project-branch parameter if not specified
if [[ -z $project_branch ]]; then
  recent_branches=$(get_recent_branches "$project")
  branches_with_none=$(echo -e "none\n$recent_branches")
  project_branch=$(prompt_fzf "Select the project branch" "$branches_with_none")
fi

# Generate the suggested hostname based on the project-branch
suggested_hostname=$(echo "$project_branch" | tr '/' '-')

# Prompt for the --name parameter with the suggested hostname
name_param=$(prompt_readline "Enter the --name parameter" "$suggested_hostname")

# Get the list of repos from the constellation yml files
repos=$(get_repos_from_constellation "$project" "$constellation")

# Ensure each repo is on a new line
repos=$(echo "$repos" | tr ' ' '\n')

# Prompt the user to select which constellation projects they want to set a branch for
selected_repos=$(prompt_fzf_multi "Select which constellation projects you want to set a branch for (use Tab to select multiple)" "$(echo -e "none\n$repos")")

# Initialize an array to hold the --config parameters
config_params=()

# If the user selected any repos, prompt for the branch names
if [[ "$selected_repos" != "none" ]]; then
  IFS=$'\n' read -rd '' -a selected_repos_array <<<"$selected_repos"
  for repo in "${selected_repos_array[@]}"; do
    branch=$(prompt_readline "Enter the branch for $repo" "$project_branch")
    config_params+=("--config ${repo}.branch=${branch}")
  done
fi

# Prompt the user if they want both "before" and "after" instances
before_after=$(echo -e "No\nYes" | fzf --prompt="Do you want both 'before' and 'after' instances?: " --reverse)

select_resources=$(echo -e "default\n6xlarge\n4xlarge\n2xlarge\nlarge" | fzf --prompt="What Memory & CPU resources do you need?" --reverse)
resources_param=""

if [[ "$select_resources" == "large" ]]; then
  resources_param="--memory 32 --cpu 4"
elif [[ "$select_resources" == "2xlarge" ]]; then
  resources_param="--memory 48 --cpu 6"
elif [[ "$select_resources" == "4xlarge" ]]; then
  resources_param="--memory 64 --cpu 8"
elif [[ "$select_resources" == "6xlarge" ]]; then
  resources_param="--memory 96 --cpu 12"
else
  resources_param="--memory 24 --cpu 3"
fi

# Prompt if they want to wait
should_wait=$(echo -e "No\nYes" | fzf --prompt="Do you want to synchronously wait for the instance(s) to load?" --reverse)
wait_param=""

if [[ "$should_wait" == "Yes" ]]; then
  wait_param=" --wait --wait-timeout=-1 --wait-for-unit=spin.target"
fi

if [[ "$before_after" == "Yes" ]]; then
  # Construct the "before" command
  before_name_param="before-$name_param"
  before_command="spin up $project:$constellation --name '$before_name_param' ${resources_param}"

  # Construct the "after" command
  after_name_param="after-$name_param"
  if [[ "$constellation" == "none" ]]; then
    if [[ "$project_branch" == "none" ]]; then
      after_command="spin up $project --name '$after_name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    else
      after_command="spin up $project@$project_branch --name '$after_name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    fi
  else
    if [[ "$project_branch" == "none" ]]; then
      after_command="spin up $project:$constellation --name '$after_name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    else
      after_command="spin up $project:$constellation@$project_branch --name '$after_name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    fi
  fi

  # Execute the "before" command
  echo ""
  echo "--------------------------------------------------------------------------------"
  echo "Creating 'before' instance, '${before_name_param}':"
  echo "--------------------------------------------------------------------------------"
  echo ""
  echo "$before_command"
  echo ""
  eval "$before_command" || {
    echo "Error: Failed to create 'before' instance."
    exit 1
  }

  # Execute the "after" command
  echo ""
  echo "--------------------------------------------------------------------------------"
  echo "Creating 'after' instance, '${after_name_param}':"
  echo "--------------------------------------------------------------------------------"
  echo ""
  echo "$after_command"
  echo ""
  eval "$after_command" || {
    echo "Error: Failed to create 'after' instance."
    exit 1
  }
else
  # Construct the final command
  if [[ "$constellation" == "none" ]]; then
    if [[ "$project_branch" == "none" ]]; then
      final_command="spin up $project --name '$name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    else
      final_command="spin up $project@$project_branch --name '$name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    fi
  else
    if [[ "$project_branch" == "none" ]]; then
      final_command="spin up $project:$constellation --name '$name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    else
      final_command="spin up $project:$constellation@$project_branch --name '$name_param' ${config_params[@]} ${resources_param} ${wait_param}"
    fi
  fi

  # Execute the final command
  echo ""
  echo "--------------------------------------------------------------------------------"
  echo "Create instance, '${name_param}':"
  echo "--------------------------------------------------------------------------------"
  echo ""
  echo "$final_command"
  echo ""
  eval "$final_command" || {
    echo "Error: Failed to create instance."
    exit 1
  }
fi
